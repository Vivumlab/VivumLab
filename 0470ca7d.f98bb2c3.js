(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{230:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),b=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=b(n),p=r,m=s["".concat(o,".").concat(p)]||s[p]||u[p]||a;return n?i.a.createElement(m,l(l({ref:t},d),{},{components:n})):i.a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var r=n(3),i=n(7),a=(n(0),n(230)),o={id:"adding-services",title:"Adding Services",hide_title:!0,hide_table_of_contents:!1,sidebar_label:"Adding Services",custom_edit_url:"https://github.com/VivumLab/VivumLab/issues/new?template=documentation.md"},l={unversionedId:"dev/adding-services",id:"dev/adding-services",isDocsHomePage:!1,title:"Adding Services",description:"Before you begin",source:"@site/docs/dev/Adding-Services.md",slug:"/dev/adding-services",permalink:"/docs/dev/adding-services",editUrl:"https://github.com/VivumLab/VivumLab/issues/new?template=documentation.md",version:"current",sidebar_label:"Adding Services",sidebar:"docs",previous:{title:"Zulip",permalink:"/docs/software/zulip"},next:{title:"Contributing to Vivumlab",permalink:"/docs/CONTRIBUTING"}},c=[{value:"What does the script do?",id:"what-does-the-script-do",children:[]},{value:"Before you run the task",id:"before-you-run-the-task",children:[]},{value:"Running the script",id:"running-the-script",children:[]},{value:"Create Role Folder",id:"create-role-folder",children:[{value:"Use hardcoded volume paths",id:"use-hardcoded-volume-paths",children:[]}]},{value:"Add Service to Documentation",id:"add-service-to-documentation",children:[{value:"Create a Documentation Page",id:"create-a-documentation-page",children:[]}]},{value:"Add Service to Inventory File",id:"add-service-to-inventory-file",children:[]},{value:"Add Service to README",id:"add-service-to-readme",children:[]},{value:"Add Service to <code>config.yml.j2</code>",id:"add-service-to-configymlj2",children:[]}],d={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"before-you-begin"},"Before you begin"),Object(a.b)("p",null,"Before you begin, please familiarize yourself with the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"../CONTRIBUTING"}),"Contribution Guidelines"),"."),Object(a.b)("p",null,'This is "Work In Progress" at the moment.'),Object(a.b)("h1",{id:"using-the-add_package-task-to-add-services-to-vivumlab"},"Using the add_package Task to add services to VivumLab"),Object(a.b)("h2",{id:"what-does-the-script-do"},"What does the script do?"),Object(a.b)("p",null,"The add_package script, the creation of new service files."),Object(a.b)("h2",{id:"before-you-run-the-task"},"Before you run the task"),Object(a.b)("p",null,"You'll need three pieces of information:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Package Name in Title case: This is used whenever we need a Title for the package.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"eg. ",Object(a.b)("em",{parentName:"li"},"Jellyfin"),", not ",Object(a.b)("em",{parentName:"li"},"jellyfin")," or ",Object(a.b)("em",{parentName:"li"},"JELLYFIN")))),Object(a.b)("li",{parentName:"ul"},"The URL for the package: Used in documentation files to link to package website or source.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"eg. ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://jellyfin.org/"}),"https://jellyfin.org/")," or ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/jellyfin/jellyfin"}),"https://github.com/jellyfin/jellyfin")))),Object(a.b)("li",{parentName:"ul"},"A one-line description of the package: Used in documention, etc.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"eg. ",Object(a.b)("em",{parentName:"li"},"The Free Software Media System"),", or ",Object(a.b)("em",{parentName:"li"},"An open source media system, forked from Emby"))))),Object(a.b)("p",null,"When you have entered those three pieces of information, The script then does the following for you:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Creates an issue on Github."),Object(a.b)("li",{parentName:"ul"},"Creates a branch for, and tied to the issue."),Object(a.b)("li",{parentName:"ul"},"Creates an (empty) Pull Request, that resolves the issue."),Object(a.b)("li",{parentName:"ul"},"Fetches the new branch, and checks it out."),Object(a.b)("li",{parentName:"ul"},"Creates the Service Role Directory",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Edits the role/PACKAGENAME/tasks/main.yml"))),Object(a.b)("li",{parentName:"ul"},"Creates the Documentation file"),Object(a.b)("li",{parentName:"ul"},"Edits the Readme, and Changelog files"),Object(a.b)("li",{parentName:"ul"},"Edits the group_var/all file to include the new package in the Enabled Services list")),Object(a.b)("h2",{id:"running-the-script"},"Running the script"),Object(a.b)("p",null,"From the root project directory run:\n",Object(a.b)("inlineCode",{parentName:"p"},"vlab add_package")," and answer the 3 questions.\nOnce the script has run, you must edit the ",Object(a.b)("inlineCode",{parentName:"p"},"roles/PACKAGENAME/templates/docker-compose.PACKAGENAME.yml.j2")," file."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"eg. ",Object(a.b)("em",{parentName:"li"},"roles/jellyfin/templates/docker-compose.jellyfin.yml.j2"))),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Please review all other files, before pushing your changes to github.")),Object(a.b)("h1",{id:"how-to-manually-add-services-to-vivumlab"},"How to Manually Add Services to Vivumlab"),Object(a.b)("h2",{id:"create-role-folder"},"Create Role Folder"),Object(a.b)("p",null,"Copy an existing role folder like 'airsonic' from the ",Object(a.b)("inlineCode",{parentName:"p"},"roles/")," folder,\nthen adapt the values as needed."),Object(a.b)("h3",{id:"use-hardcoded-volume-paths"},"Use hardcoded volume paths"),Object(a.b)("p",null,"All mounted docker volumes should point to a folder named after the service that is using it, and located under ",Object(a.b)("inlineCode",{parentName:"p"},"/home/root/vivumlab"),"."),Object(a.b)("h2",{id:"add-service-to-documentation"},"Add Service to Documentation"),Object(a.b)("h3",{id:"create-a-documentation-page"},"Create a Documentation Page"),Object(a.b)("p",null,"Each service should have it's own page within the ",Object(a.b)("inlineCode",{parentName:"p"},"docs/software/")," folder.\nUse existing docs as a template."),Object(a.b)("h2",{id:"add-service-to-inventory-file"},"Add Service to Inventory File"),Object(a.b)("p",null,"The service needs to be added within\n",Object(a.b)("inlineCode",{parentName:"p"},"group_vars/all"),"."),Object(a.b)("p",null,"Place it in the ",Object(a.b)("inlineCode",{parentName:"p"},"services:")," section in alphabetical order."),Object(a.b)("h2",{id:"add-service-to-readme"},"Add Service to README"),Object(a.b)("p",null,"The service should be added under the list of ",Object(a.b)("inlineCode",{parentName:"p"},"Available Software"),"."),Object(a.b)("h2",{id:"add-service-to-configymlj2"},"Add Service to ",Object(a.b)("inlineCode",{parentName:"h2"},"config.yml.j2")),Object(a.b)("p",null,"In the config template ",Object(a.b)("inlineCode",{parentName:"p"},"roles/vivumlab_config/templates/config.yml.j2")," the\nservice should be added in alphabetical order under the ",Object(a.b)("inlineCode",{parentName:"p"},"# Services List")," section."),Object(a.b)("h1",{id:"how-to-debug-a-new-service"},"How to Debug a New Service"),Object(a.b)("p",null,"After a new service has been deployed, run ",Object(a.b)("inlineCode",{parentName:"p"},"systemctl status SERVICE_NAME")," to see\nhow it's doing."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"eg. systemctl status jellyfin")),Object(a.b)("p",null,"If it's not running with an error like ",Object(a.b)("inlineCode",{parentName:"p"},"(code=exited, status=1/FAILURE)")),Object(a.b)("p",null,"Grab the value of the ExecStart line, and run it by hand. So if the ExecStart line looks like:\n",Object(a.b)("inlineCode",{parentName:"p"},"ExecStart=/usr/bin/docker-compose up"),"\nthen manually change directory ",Object(a.b)("inlineCode",{parentName:"p"},"cd /home/root/vivumlab/zulip")," and run the bit after the =, ",Object(a.b)("inlineCode",{parentName:"p"},"/usr/bin/docker-compose zulip up")," to see the error output directly."))}b.isMDXComponent=!0}}]);