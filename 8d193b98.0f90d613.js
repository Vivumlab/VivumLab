(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),o=(n(0),n(230)),r={id:"CONTRIBUTING",title:"Contributing to Vivumlab",hide_title:!0,hide_table_of_contents:!1,sidebar_label:"CONTRIBUTING",custom_edit_url:"https://github.com/VivumLab/VivumLab/edit/dev/CONTRIBUTING.md"},l={unversionedId:"CONTRIBUTING",id:"CONTRIBUTING",isDocsHomePage:!1,title:"Contributing to Vivumlab",description:"Contributing to VivumLab",source:"@site/docs/CONTRIBUTING.md",slug:"/CONTRIBUTING",permalink:"/docs/CONTRIBUTING",editUrl:"https://github.com/VivumLab/VivumLab/edit/dev/CONTRIBUTING.md",version:"current",sidebar_label:"CONTRIBUTING",sidebar:"docs",previous:{title:"Adding Services",permalink:"/docs/dev/adding-services"},next:{title:"Developer Tips",permalink:"/docs/dev/tips"}},s=[{value:"Open source, VivumLab and You",id:"open-source-vivumlab-and-you",children:[]},{value:"VivumLab and GitHub",id:"vivumlab-and-github",children:[]},{value:"Development Workflow Overview",id:"development-workflow-overview",children:[]},{value:"Issues",id:"issues",children:[{value:"Detail",id:"detail",children:[]},{value:"Bug Reports",id:"bug-reports",children:[]},{value:"Third Party Softwares",id:"third-party-softwares",children:[]}]},{value:"Pull Requests",id:"pull-requests",children:[{value:"Size matters",id:"size-matters",children:[]},{value:"Not just any PR",id:"not-just-any-pr",children:[]},{value:"Contribution: Preparing to fork VivumLab",id:"contribution-preparing-to-fork-vivumlab",children:[]},{value:"Contribution: Forking VivumLab",id:"contribution-forking-vivumlab",children:[]},{value:"Contribution: Forked VivumLab... Now what?",id:"contribution-forked-vivumlab-now-what",children:[]},{value:"Contribution: New issues, but no PR",id:"contribution-new-issues-but-no-pr",children:[]}]},{value:"Git Commit Guidelines",id:"git-commit-guidelines",children:[{value:"Commit Message Format",id:"commit-message-format",children:[]},{value:"Revert",id:"revert",children:[]},{value:"Type",id:"type",children:[]},{value:"Scope",id:"scope",children:[]},{value:"Subject",id:"subject",children:[]},{value:"Body",id:"body",children:[]},{value:"Footer",id:"footer",children:[]}]},{value:"Working locally on the website and documentation",id:"working-locally-on-the-website-and-documentation",children:[]},{value:"Contributions and Licensing",id:"contributions-and-licensing",children:[]},{value:"Disclaimer",id:"disclaimer",children:[]}],c={rightToc:s};function b(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"contributing-to-vivumlab"},"Contributing to VivumLab"),Object(o.b)("h2",{id:"open-source-vivumlab-and-you"},"Open source, VivumLab and You"),Object(o.b)("p",null,"VivumLab recognises that an open source project is only as strong as its community. For this reason we want to make contributing to this project as easy and transparent as possible, whether it is:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Reporting a Bug"),Object(o.b)("li",{parentName:"ul"},"Discussing the current state of the code"),Object(o.b)("li",{parentName:"ul"},"Submitting a fix"),Object(o.b)("li",{parentName:"ul"},"Proposing new ",Object(o.b)("strong",{parentName:"li"},"features")),Object(o.b)("li",{parentName:"ul"},"Testing (security or otherwise)"),Object(o.b)("li",{parentName:"ul"},"Design (graphic, web or otherwise)"),Object(o.b)("li",{parentName:"ul"},"Investing yourself, and becoming a recognised contributor")),Object(o.b)("h2",{id:"vivumlab-and-github"},"VivumLab and GitHub"),Object(o.b)("p",null,"We use GitHub to host code, to track issues and feature requests, as well as accept pull requests."),Object(o.b)("h2",{id:"development-workflow-overview"},"Development Workflow Overview"),Object(o.b)("p",null,"VivumLab follows a common FOSS development workflow. A core group of maintainers handle the branching, merging and tagging of releases. While this core group shepherds the overall project, everyone is welcome to contribute. This document goes into detail on how you can contribute."),Object(o.b)("h2",{id:"issues"},"Issues"),Object(o.b)("p",null,"Report bugs, offer suggestions, make requests, all by opening a new issue; it's that easy!\nHere are some guidelines to make your issue submissions better for the community."),Object(o.b)("p",null,"!!! NOTE: No change happens without a prefacing issue, simple."),Object(o.b)("h3",{id:"detail"},"Detail"),Object(o.b)("p",null,"Write issues with detail, background information, and sample code if applicable.\nKeep background information relevant to the issue, and do not share personal information.\nGather feedback from the community; have patience, wait a day or two before beginning work"),Object(o.b)("h3",{id:"bug-reports"},"Bug Reports"),Object(o.b)("p",null,"Bug reports are a staple of software development. When submitting a bug report, make sure to include (where applicable):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a quick summary and/or background information"),Object(o.b)("li",{parentName:"ul"},"steps to reproduce (be specific)"),Object(o.b)("li",{parentName:"ul"},"what you expected to happen"),Object(o.b)("li",{parentName:"ul"},"what actually happens"),Object(o.b)("li",{parentName:"ul"},"if appropriate, try to include:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"sample code"),Object(o.b)("li",{parentName:"ul"},"installed software (include versions)"),Object(o.b)("li",{parentName:"ul"},"options you tried (but didn't work)")))),Object(o.b)("h3",{id:"third-party-softwares"},"Third Party Softwares"),Object(o.b)("p",null,"VivumLab acknowledges that sometimes bugs are not the fault of VivumLab code but rather the fault of the software used to make VivumLab possible. This is not a reason to debate or fault:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"persons"),Object(o.b)("li",{parentName:"ul"},"companies"),Object(o.b)("li",{parentName:"ul"},"communities")),Object(o.b)("p",null,"Instead, find a workaround and suggest it to the community. VivumLab may also be able to assist other users in automating your suggested workaround; pretty cool, right?"),Object(o.b)("h2",{id:"pull-requests"},"Pull Requests"),Object(o.b)("p",null,"Pull requests, or PRs are the best way to propose changes to the codebase, though all PRs will need to be prefaced with an issue.\nAlso there are commit rules in place, that must be followed. Be sure to speak to a community leader, if you are unsure."),Object(o.b)("h3",{id:"size-matters"},"Size matters"),Object(o.b)("p",null,"A good PR is small and changes as few lines of code as possible to resolve the issue. Multiple smaller separate PRs are ofter better than one big PR that touches multiple areas of the code."),Object(o.b)("p",null,"A large PR with several unrelated fixes in it can contain code that may cause issues with the VivumLab codebase; effectively stopping the rest of the code from being merged."),Object(o.b)("p",null,"Ultimately, smaller PRs are easier to review, test, track, and merge."),Object(o.b)("h3",{id:"not-just-any-pr"},"Not just any PR"),Object(o.b)("p",null,"While we actively welcome your PRs, a successful contribution to the project is not guaranteed. The PR will be reviewed by VivumLab Community Leaders, discussions will ensue, and only after appropriate deliberation will the PR be merged. This is only to ensure the quality of code; it is nothing personal."),Object(o.b)("h3",{id:"contribution-preparing-to-fork-vivumlab"},"Contribution: Preparing to fork VivumLab"),Object(o.b)("p",null,"To contribute to VivumLab, you'll need to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Establish and maintain a mirrored Fork"),Object(o.b)("li",{parentName:"ol"},"Branch Dev in your fork"),Object(o.b)("li",{parentName:"ol"},"Develop your feature/fix"),Object(o.b)("li",{parentName:"ol"},"Commit to your branch on your fork"),Object(o.b)("li",{parentName:"ol"},"Create a Pull Request")),Object(o.b)("p",null,"Doing the above will require some prior knowledge; you'll need a working understanding of Git, and a GitHub account. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://duckduckgo.com/?q=learn+git"}),"Understanding Git")," has a small learning curve and is unfortunately, beyond the scope of this document."),Object(o.b)("p",null,"!!!NOTE: The following instructions are provided as a guideline, and is by no means, definitive, Follow the link, do some research."),Object(o.b)("h3",{id:"contribution-forking-vivumlab"},"Contribution: Forking VivumLab"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Create your own fork by clicking the "Fork" button at ',Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Vivumlab/VivumLab"}),"https://github.com/Vivumlab/VivumLab"),": ",Object(o.b)("img",{alt:"Fork button location",src:n(301).default}))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Then set your Protected Branches in Settings -> "Branches" like this\n',Object(o.b)("img",{alt:"Setting Protected Branches",src:n(302).default}))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Install ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://wei.github.io/pull/"}),"Pull")," to keep your fork up-to-date with our Repository."))),Object(o.b)("h3",{id:"contribution-forked-vivumlab-now-what"},"Contribution: Forked VivumLab... Now what?"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Make sure you don't have any outstanding un-related changes in your local repository with ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"git status")),"; You should see ",Object(o.b)("inlineCode",{parentName:"li"},"nothing to commit, working tree clean"),"."),Object(o.b)("li",{parentName:"ol"},"Identify the branch name by navigating to the issues' linked Pull Request and clicking the copy icon next to the Branch name.\n",Object(o.b)("img",{alt:"Finding the Branch Name",src:n(303).default})),Object(o.b)("li",{parentName:"ol"},"Run ",Object(o.b)("inlineCode",{parentName:"li"},"git fetch origin")),Object(o.b)("li",{parentName:"ol"},"Run ",Object(o.b)("inlineCode",{parentName:"li"},"git checkout <<branch name>>")),Object(o.b)("li",{parentName:"ol"},"Make your changes"),Object(o.b)("li",{parentName:"ol"},"Commit and Push")),Object(o.b)("h3",{id:"contribution-new-issues-but-no-pr"},"Contribution: New issues, but no PR"),Object(o.b)("p",null,"Fixing issues announced by the community is the backbone of this project. What happens when you find an issue that you know how to fix, but no one has made a PR to fix it? Here's how you should do it"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Make sure you don't have any outstanding un-related changes in your local repository with ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"git status")),". You should see ",Object(o.b)("inlineCode",{parentName:"li"},"nothing to commit, working tree clean"),"."),Object(o.b)("li",{parentName:"ol"},"Locate the appropriate issue, and from this issue, click the ",Object(o.b)("inlineCode",{parentName:"li"},"Create Pull Request")," button."),Object(o.b)("li",{parentName:"ol"},"Now click the ",Object(o.b)("inlineCode",{parentName:"li"},"Check Out Branch")," button and run ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"git status"))," again on your local copy of the repository."),Object(o.b)("li",{parentName:"ol"},"Now make your changes, commit and push them."),Object(o.b)("li",{parentName:"ol"},"On GitHub, go to your PR and make sure it is not labeled ",Object(o.b)("strong",{parentName:"li"},"WIP")," and that all the check boxes are checked (If applicable).")),Object(o.b)("p",null,"Once you've submitted the PR, community leaders will review it. Only once it is approved, will it be merged."),Object(o.b)("p",null,"At this point, nothing else is required from you, unless specifically requested. Don't worry about rebasing, or closing the Pull Request.\nIf the Pull Request needs changes, the maintainers will add comments describing the needed changes, the label ",Object(o.b)("inlineCode",{parentName:"p"},"WIP:")," will be added to the start of the title, and the submitter will be reassigned to the PR."),Object(o.b)("p",null,"If/When you are asked to rebase, run:\n",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"git checkout dev")),"\n",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"git pull")),"\n",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"git checkout <branch name>")),"\n",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"git rebase dev"))),Object(o.b)("h2",{id:"git-commit-guidelines"},"Git Commit Guidelines"),Object(o.b)("p",null,"We have very precise rules over how our git commit messages can be formatted.  This leads to ",Object(o.b)("strong",{parentName:"p"},"more\nreadable messages")," that are easy to follow when looking through the ",Object(o.b)("strong",{parentName:"p"},"project history"),".  But also,\nwe use the git commit messages to ",Object(o.b)("strong",{parentName:"p"},"generate the changelog"),"."),Object(o.b)("p",null,"The commit message formatting can be added using a typical git workflow or through the use of a CLI\nwizard for example (",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/commitizen/cz-cli"}),"Commitizen"),")."),Object(o.b)("h3",{id:"commit-message-format"},"Commit Message Format"),Object(o.b)("p",null,"Each commit message consists of a ",Object(o.b)("strong",{parentName:"p"},"header"),", a ",Object(o.b)("strong",{parentName:"p"},"body")," and a ",Object(o.b)("strong",{parentName:"p"},"footer"),".  The header has a special\nformat that includes a ",Object(o.b)("strong",{parentName:"p"},"type"),", a ",Object(o.b)("strong",{parentName:"p"},"scope")," and a ",Object(o.b)("strong",{parentName:"p"},"subject"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"header")," is mandatory and the ",Object(o.b)("strong",{parentName:"p"},"scope")," of the header is optional."),Object(o.b)("p",null,"Any line of the commit message cannot be longer than 100 characters! This allows the message to be easier\nto read on GitHub as well as in various git tools."),Object(o.b)("h3",{id:"revert"},"Revert"),Object(o.b)("p",null,"If the commit reverts a previous commit, it should begin with ",Object(o.b)("inlineCode",{parentName:"p"},"revert: "),", followed by the header\nof the reverted commit.\nIn the body it should say: ",Object(o.b)("inlineCode",{parentName:"p"},"This reverts commit <hash>."),", where the hash is the SHA of the commit\nbeing reverted."),Object(o.b)("h3",{id:"type"},"Type"),Object(o.b)("p",null,"Must be one of the following:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"feat"),": A new feature"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"fix"),": A bug fix"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"docs"),": Documentation only changes"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"style"),": Changes that do not affect the meaning of the code (white-space, formatting, missing\nsemi-colons, etc)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"refactor"),": A code change that neither fixes a bug nor adds a feature"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"perf"),": A code change that improves performance"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"test"),": Adding missing or correcting existing tests"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"chore"),": Changes to the build process or auxiliary tools and libraries such as documentation\ngeneration")),Object(o.b)("h3",{id:"scope"},"Scope"),Object(o.b)("p",null,"The scope could be anything specifying place of the commit change. For example ",Object(o.b)("inlineCode",{parentName:"p"},"service"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"core"),", ",Object(o.b)("inlineCode",{parentName:"p"},"docs"),", etc..."),Object(o.b)("h3",{id:"subject"},"Subject"),Object(o.b)("p",null,"The subject contains succinct description of the change:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'use the imperative, present tense: "change" not "changed" nor "changes"'),Object(o.b)("li",{parentName:"ul"},"don't capitalize first letter"),Object(o.b)("li",{parentName:"ul"},"no dot (.) at the end")),Object(o.b)("h3",{id:"body"},"Body"),Object(o.b)("p",null,"Just as in the ",Object(o.b)("strong",{parentName:"p"},"subject"),', use the imperative, present tense: "change" not "changed" nor "changes".\nThe body should include the motivation for the change and contrast this with previous behavior.'),Object(o.b)("h3",{id:"footer"},"Footer"),Object(o.b)("p",null,"The footer should contain any information about ",Object(o.b)("strong",{parentName:"p"},"Breaking Changes")," and is also the place to\n","[reference GitHub issues that this commit closes][closing-issues]","."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Breaking Changes")," should start with the word ",Object(o.b)("inlineCode",{parentName:"p"},"BREAKING CHANGE:")," with a space or two newlines.\nThe rest of the commit message is then used for this."),Object(o.b)("h2",{id:"working-locally-on-the-website-and-documentation"},"Working locally on the website and documentation"),Object(o.b)("p",null,"To work on the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://vivumlab.com/"}),"VivumLab website")," just run ",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose -f dev/docker-compose.docs-local.yml up")," to serve it via docker locally on port ",Object(o.b)("inlineCode",{parentName:"p"},"8000")," or read ",Object(o.b)("inlineCode",{parentName:"p"},"cd website && cat README.md")," for yarn instructions."),Object(o.b)("h2",{id:"contributions-and-licensing"},"Contributions and Licensing"),Object(o.b)("p",null,"This should go without saying but when you submit any contribution, including but not limited to: code additions, code changes, images, documentation, audio, and video; your submissions are assumed to be under the same license that covers the project."),Object(o.b)("p",null,"Feel free to contact a Community Leader if that's a concern."),Object(o.b)("h2",{id:"disclaimer"},"Disclaimer"),Object(o.b)("p",null,"By contributing, you agree that your contributions will be licensed under its MIT License."),Object(o.b)("hr",null),Object(o.b)("h4",{id:"attribution-reference"},"Attribution/ Reference"),Object(o.b)("p",null,"Please see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"Legal"}),"Legal/ Licensing/ Acknowledgement")))}b.isMDXComponent=!0},230:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(r,".").concat(d)]||u[d]||p[d]||o;return n?i.a.createElement(m,l(l({ref:t},c),{},{components:n})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},301:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/fork-daee3d22d63416f4651aa8c82677665f.png"},302:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/protected-branches-b3b04ce3d846baaceae70972211444bc.png"},303:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/branch-name-ccacdd117f9a24a0ced91c28f5b5d5a9.png"}}]);