---
- name: Check if nextcloud configuration is correct
  assert:
    msg: One (and only one) of the databases should be enabled (PostgreSQL/MariaDB)
    that:
      - not(nextcloud.postgres and nextcloud.mariadb)
      - nextcloud.postgres or nextcloud.mariadb

- name: Create necessary folders, with appropriate permissions.
  file:
    path: "{{ volumes_root }}/nextcloud/{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items:
    - name: config
      owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
      group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
    - name: custom_apps
      owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
      group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
    - name: themes
      owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
      group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
    # create both DB dirs just in case (e.g. migrations)
    - name: postgres
      owner: "{{ uid_output.stdout }}"
      group: "{{ gid_output.stdout }}"
    - name: mariadb
      owner: 999
      group: 999
    - name: web
      owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
      group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
    - name: build
      owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
      group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
  become: yes

- name: Create necessary Media Folders / NAS Mount Points
  file:
    path: "{{ storage_dir }}/Documents/NextCloud/data"
    state: directory
    owner: "{{ uid_output.stdout if nextcloud.system_user else '33' }}"
    group: "{{ gid_output.stdout if nextcloud.system_user else '33' }}"
  become: yes  # /mnt is owned by root

- name: Copy nextcloud web Dockerfile into place.
  when: nextcloud.image_type == "fpm-alpine"
  copy:
    src: "web/Dockerfile"
    dest: "{{ volumes_root }}/nextcloud/web/Dockerfile"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Copy nextcloud web nginx.conf into place.
  when: nextcloud.image_type == "fpm-alpine"
  copy:
    src: "web/nginx.conf"
    dest: "{{ volumes_root }}/nextcloud/web/nginx.conf"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Copy nextcloud build Dockerfile into place.
  when: nextcloud.image_type == "fpm-alpine"
  template:
    src: Dockerfile.j2
    dest: "{{ volumes_root }}/nextcloud/build/Dockerfile"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Copy nextcloud build entrypoint.sh into place.
  when: nextcloud.image_type == "fpm-alpine"
  copy:
    src: "build/entrypoint.sh"
    dest: "{{ volumes_root }}/nextcloud/build/entrypoint.sh"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
    mode: +x
  become: yes

- name: Copy nextcloud docker-compose.yml file into place.
  template:
    src: docker-compose.nextcloud.yml.j2
    dest: "{{ volumes_root }}/nextcloud/docker-compose.yml"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  vars:
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
  become: yes

- name: Configure nextcloud systemd service.
  become: yes
  template:
    src: service.j2
    dest: /etc/systemd/system/nextcloud.service

- name: Start nextcloud
  systemd:
    name: nextcloud
    enabled: yes
    daemon-reload: yes
    state: started
  become: yes
