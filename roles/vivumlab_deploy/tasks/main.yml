---
- name: Get UID
  command: id -u {{ vlab_ssh_user }}
  register: uid_output

- name: Get GID
  command: id -g {{ vlab_ssh_user }}
  register: gid_output

- name: Make VivumLab data directories.
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
    mode: "777"
  loop:
    - "{{ volumes_root }}/traefik"
    - "{{ volumes_root }}/traefik/conf.d"
    - /etc/docker
  become: yes
  tags:
    - setup

- name: Copy VERSION file
  copy:
    src: VERSION
    dest: "{{ volumes_root }}/VERSION"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Copy check_mounts.sh
  template:
    src: check_mounts.sh.j2
    dest: "{{ volumes_root }}/check_mounts.sh"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Copy list_mounts
  template:
    src: list_mounts.j2
    dest: "{{ volumes_root }}/list_mounts"
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes

- name: Ensure check_mounts.sh is added as a cron job
  cron:
    name: "check mounts"
    minute: "*/5"
    hour: "*"
    job: "/bin/bash {{ volumes_root }}/check_mounts.sh > /dev/null"
    state: present
  become: yes
  when: check_mounts == True

- name: Ensure check_mounts.sh is removed as a cron job
  cron:
    name: "check mounts"
    minute: "*/5"
    hour: "*"
    job: "/bin/bash {{ volumes_root }}/check_mounts.sh > /dev/null"
    state: absent
  become: yes
  when: check_mounts == False

- name: Configure docker log settings
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
  become: yes

# Needs passlib
- name: Write user to basic auth file
  htpasswd:
    path: "{{ volumes_root }}/traefik/basicAuth"
    name: "{{ default_username }}"
    password: "{{ default_password }}"
    mode: 0640
  notify:
    - Restart Traefik

- name: Configure SSL
  file:
    path: "{{ volumes_root }}/traefik/acme.json"
    mode: 0600
    state: touch

- name: Create Media Folders / NAS Mount Points
  when:
    - nas_enable
  file:
    path: "{{ storage_dir }}/{{ item }}"
    state: directory
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  with_items:
    - "Backups"
    - "Books"
    - "Documents"
    - "Downloads"
    - "Music"
    - "Pictures"
    - "temp"
    - "Video"
  become: yes

- name: Configure NAS - Public NFS Shares
  when:
    - nas_enable
    - nas_mount_type == "nfs"
  lineinfile:
    path: /etc/fstab
    line: "{{ nas_host }}:{{ nas_share_path }}/{{ item }} \
      {{ storage_dir }}/{{ item }} nfs \
      auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0"
  with_items:
    - "Backups"
    - "Books"
    - "Documents"
    - "Downloads"
    - "Music"
    - "Pictures"
    - "temp"
    - "Video"
  become: yes

- name: Configure NAS - Samba Shares
  when:
    - nas_enable
    - nas_mount_type == "smb" or nas_mount_type == "cifs"
  lineinfile:
    path: /etc/fstab
    line: "//{{ nas_host }}/{{ nas_share_path }}/{{ item }} \
      {{ storage_dir }}/{{ item }} cifs \
      nobrl,username={{ nas_user }},vers=2.0,\
      dom={{ nas_workgroup }},password={{ nas_pass }},\
      uid={{ uid_output.stdout }},gid={{ gid_output.stdout }},\
      iocharset=utf8,file_mode=0777,dir_mode=0770  0  0"
  with_items:
    - "Backups"
    - "Books"
    - "Documents"
    - "Downloads"
    - "Music"
    - "Pictures"
    - "temp"
    - "Video"
  become: yes

- name: Mount NAS Drives
  when: nas_enable
  command: mount -a
  args:
    warn: no
  ignore_errors: yes
  become: yes

- name: Configure VivumLab systemd service.
  become: yes
  template:
    src: traefik.service
    dest: /etc/systemd/system/traefik.service
  notify:
    - "Restart Traefik"

# Hacky ansible workaround. Would love to remove these 4 tasks.
# Long story short it ensures the `tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"` bit can work.
- name: Ensure tor host folder exists
  file:
    path: /var/lib/tor/ssh-onion/
    state: directory
  become: yes
  tags:
    - tor

- name: Ensure tor host folder exists
  file:
    path: /var/lib/tor/http-onion/
    state: directory
  become: yes
  tags:
    - tor

- name: Ensure blank tor host files exist
  file:
    path: /var/lib/tor/ssh-onion/hostname
    state: touch
  become: yes
  tags:
    - tor

- name: Ensure blank tor host files exist
  file:
    path: /var/lib/tor/http-onion/hostname
    state: touch
  become: yes
  tags:
    - tor
# / Hack

- name: Read Tor connection info
  shell: cat /var/lib/tor/http-onion/hostname
  register: tor_http_domain_file
  become: yes
  tags:
    - tor

- name: Configure Traefik .yaml
  template:
    src: traefik.yaml
    dest: "{{ volumes_root }}/traefik/traefik.yaml"
  notify:
    - Restart Traefik

- name: Configure Traefik conf.d
  template:
    src: conf.d/middlewares.yaml
    dest: "{{ volumes_root }}/traefik/conf.d/middlewares.yaml"
  vars:
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
  notify:
    - Restart Traefik

- name: Copy VivumLab docker-compose.yml file into place.
  template:
    src: docker-compose.traefik.yml.j2
    dest: "{{ volumes_root }}/traefik/docker-compose.yml"
  vars:
    service_domain: "{% if traefik.domain %}{{ traefik.domain }}{% else %}{{ traefik.subdomain }}.{{ domain }}{% endif %}"
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
  notify:
    - Restart Traefik

- name: Create VivumLab hosts file.
  file:
    path: "{{ volumes_root }}/vivumlab_hosts"
    state: touch

- name: Configure VivumLab hosts file.
  lineinfile:
    path: "{{ volumes_root }}/vivumlab_hosts"
    line: "{{ ansible_host }} {{ service_domain }} {{ service_item }}"
  when: query | bool
  loop: "{{ services | flatten(1) }}"
  loop_control:
    loop_var: service_item
  vars:
    service_domain: "{% if lookup('vars', service_item).domain %}{{ lookup('vars', service_item).domain }}{% else %}{{ lookup('vars', service_item).subdomain }}.{{ domain }}{% endif %}"
    query: "{{ vars[service_item]['enable'] }}"
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
    tor_ssh_domain: "{{ tor_ssh_domain_file.stdout | default('') }}"

- name: Pull VivumLab Traefik Image
  docker_compose:
    project_src: "{{ volumes_root}}/traefik"
    pull: yes
  ignore_errors: yes

- name: Read Tor SSH connection info
  shell: cat /var/lib/tor/ssh-onion/hostname
  register: tor_ssh_domain_file
  when: "lookup('vars', 'enable_tor')"
  become: yes
  tags:
    - tor

- name: Read Tor connection info
  shell: cat /var/lib/tor/http-onion/hostname
  register: tor_http_domain_file
  when: "lookup('vars', 'enable_tor')"
  become: yes
  tags:
    - tor

- name: Flush handlers
  meta: flush_handlers

- name: Deploy enabled Services
  include_role:
    name: "{{ service_item }}"
  when: query | bool
  loop: "{{ services | flatten(1) }}"
  loop_control:
    loop_var: service_item
  vars:
    hsts: "{{ lookup('vars', service_item).hsts }}"
    auth: "{{ lookup('vars', service_item).auth }}"
    custom_domain: "{{ lookup('vars', service_item).domain }}"
    service_domain: "{% if lookup('vars', service_item).domain %}{{ lookup('vars', service_item).domain }}{% else %}{{ lookup('vars', service_item).subdomain }}.{{ domain }}{% endif %}"
    query: "{{ vars[service_item]['enable'] }}"
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
    tor_ssh_domain: "{{ tor_ssh_domain_file.stdout | default('') }}"

- name: Copy Services docker-compose.override.yml
  template:
    src: "/data/settings/{{ config_dir }}/override/{{ service_item }}/docker-compose.override.yml.j2"
    dest: "{{ volumes_root }}/{{ service_item }}/docker-compose.override.yml"
    force: yes
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  become: yes
  when:
    - query | bool
    - ("/data/settings/" ~ config_dir ~ "/override/" ~ service_item ~ "/docker-compose.override.yml.j2") is file
  loop: "{{ services | flatten(1) }}"
  loop_control:
    loop_var: service_item
  vars:
    hsts: "{{ lookup('vars', service_item).hsts }}"
    auth: "{{ lookup('vars', service_item).auth }}"
    custom_domain: "{{ lookup('vars', service_item).domain }}"
    service_domain: "{% if lookup('vars', service_item).domain %}{{ lookup('vars', service_item).domain }}{% else %}{{ lookup('vars', service_item).subdomain }}.{{ domain }}{% endif %}"
    query: "{{ vars[service_item]['enable'] }}"
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"
    tor_ssh_domain: "{{ tor_ssh_domain_file.stdout | default('') }}"
  ignore_errors: yes

- name: Ensure disabled services are not running
  systemd:
    name: "{{ service_item }}"
    state: stopped
    enabled: no
  when: not query | bool
  loop: "{{ services | flatten(1) }}"
  loop_control:
    loop_var: service_item
  failed_when: false
  ignore_errors: yes
  vars:
    query: "{{ vars[service_item]['enable'] }}"
  become: yes

- debug:
    msg: "VivumLab Installed successfully! Go to https://{% if sui.domain %}{{ sui.domain }}{% else %}{{ sui.subdomain }}.{{ domain }}{% endif %}/ or http://{{ vlab_ip }}:8181 to get started."

- debug:
    msg: "You can also access your services via Tor at http://{{ tor_http_domain_file.stdout }}"
  when: enable_tor
  tags:
    - tor
