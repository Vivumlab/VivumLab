de:
  bastion:
    enable:
      name: "enable"
      desc: "Enables the Bastion server"
      out:
        done: "Bastion ip set, and enabled in the inventory file"
        alreadyininventory: "Bastion already present in Inventory file"
    disable:
      name: "disable"
      desc: "Disables the Bastion server"
      out:
        success: "Bastion disabled in config, and removed from Inventory"

    in:
      serveraddress: "What is your Bastion Server Ip?"

  config:
    new:
      name: "new"
      desc: "Creates or Updates the config file, as necessary"
      out:
        creating: "Creating, or updating Config file %{config_dir}/config.yml"
    show:
      name: "show"
      desc: "Shows the configuration settings for a specified service"
      out:
        tablenorender: "Unable to render table, due to object complexity. Reverting to text"
    reset:
      name: "reset"
      desc: "Resets VivumLab config"
      out:
        resetting: "Resetting config file at %{config_dir}/config.yml"
        backup: "Backing up your existing config"
    edit_raw:
      name: "edit_raw"
      desc: "Decrypts, and opens the config file in nano. Encrypts on save"
      out:
        editfile: "Decrypting and editing the config file at %{config_dir]}/encrypted.yml"
        editerror: "Something went wrong executing the decryption and or editing the file"
        fileremove: "For security reasons, the temporary decrypted config file has been deleted."
    decrypt:
      name: "decrypt"
      desc: "Decrypts the encrypted config file. You must Re-ENCRYPT yourself using vlab config encrypt"
      out:
        decrypted: "Config file is now, decrypted"
    encrypt:
      name: "encrypt"
      desc: "Encrypts a given config.yml to encrypted.yml"
      out:
        encrypted: "Config file is now, encrypted"
    set:
      name: "set"
      desc: "Sets a config variable"
      out:
        nokey: "Key %{config_key} not found in either config file. Please check the key."
    draw_error_table:
      out:
        keynomatch: "Unable to find a full match for the key %{config_key}"
        possiblekey: "Here's some possible matches:"

  core:
    checkversion:
      name: "check-version"
      desc: "checks the local version against the latest from github"
      out:
        currentversion: "You have version %{current_version}"
        versionlatest: "You're up to date"
        versionupdate: "Consider updating to %{latest_version}"
    generate_vault_pass:
      name: "generate-vault-pass"
      desc: "Creates a new Vault Password"
      out:
        noaction: "Vault pass exists, no action taking"
    deploy:
      name: "deploy"
      desc: "Deploys VivumLab, configures it first if needed"
      out:
        deploy: "Deploying Vivumlab"
    restore:
      name: "restore"
      desc: "restores a vlab install, assuming backups exist"
      out:
        restoring: "Restoring your backups, now.."
        restored: "Backups have been restored"
    uninstall:
      name: "uninstall"
      desc: "irreversably removes vlab"
      out:
        uninstall: |+
          "Uninstalling VivumLab is irreversible, and should always be done with caution"
          "Make sure to backup any files that you may want to keep before uninstalling"
        uninstalled: "VivumLab has been uninstalled."
      in:
        uninstall: "Are you sure you want to uninstall VivumLab"
        uninstallconfirm: "Confirm again, if you are sure"

  deprecated:
    vault_encrypt:
      name: "vault_encrypt"
      desc: "Encrypts the ansible vault.yml - DEPRECATED"
      out:
        encrypting: "Encrypting the vault"
        encrypted: "Vault Encrypted"
        failencrypt: "This command can fail, if the vault was already encrypted"
    vault_decrypt:
      name: "vault_decrypt"
      desc: "Decrypts the ansible vault.yml - DEPRECATED"
      out:
        decrypting: "Decrypting the vault"
        decrypted: "Vault Decrypted"
        faildecrypt: "This command can fail, if the vault was already decrypted"

  dev:
    lint:
      name: "lint"
      desc: "Lints all the YAML files"
    setup:
      name: "setup"
      desc: "Run to install Dev Requirements"
      out:
        welcome: "Welcome to VivumLab Developer Setup"
        precommiterror: "Unable to find pre-commit in your path, you may need to add ~/bin to your path."
        readythanks: |+
          "Ok, all set! Thank you for being a part of the VivumLab Community"
          "We hope that you will enjoy your time with us"
          "And we look forward to achieving great things, together"
      in:
        contribute: "Do you want to contribute to VivumLab (Yes or no)?"
    install_precommit:
      out:
        readdevdocs: |+
          "First and foremost, please make sure you have read the developer docs"
          "You can find the developers docs. here:"
          "# TODO: add url to dev docs"
        precommitwarning: "Before you push any changes you've made, pre-commit will need to be installed on your system"
        pythonerror: "VivumLab was unable to find Python3 using `which python3`. VivumLab requires python3"
      in:
        installprecommit: "Install pre-commit now?"

  git:
    sync:
      name: "sync"
      desc: "Syncs your settings git repo"
      out:
        settingssyncing: "Syncing settings via Git"
        settingssynced: "Settings synced"
        notsetup: |+
          "Warning! Your settings directory is not setup as a Git Repository"
          "Make sure to back them up using some other method. For more information, see:"
          "https://vivumlab.com/setup/installation/#syncing-settings-via-git"
    track:
      name: "track"
      desc: "Allows you to switch between different branches or tags of Vivumlab"
      out:
        trackbranch: "You are now tracking the %{branch} branch"

  migration:
    single_config:
      name: "single_config"
      desc: "Migrates away from a config.yml, and vault.yml to a single encrypted.yml"
      out:
        notdone: "Migration not needed. Config files valid."

  sanity_checks:
    s_localpassed: "Local sanity checks passed."
    s_sshkeyverifying: "Verifying SSH keys, and the ability to remotely log in to your VivumLab server via passwordless SSH"
    s_sshkeyverified: "SSH Keys are good to go!"
    s_vaultpassmissing: |+
      "Oops, your vault password in %{home_dir}, doesn't appear to exist."
      "This is unusual, but could be the result of the username changing after setup."
    s_vaultpasscreate: |+
      "A new `.vlab_vault_pass` file can be created for you;"
      "or you can exit, and try to sort this out yourself."
    q_vaultpasscreate: "Let VivumLab create a new .vlab_vault_pass for you? [y/n]"
    s_gitnoexist: "You need to install git!"
    s_lowprecommit: |+
      "Pre-commit is not installed or an earlier version than required."
      "Contributing to VivumLab requires Pre-Commit version %{req_precommit_ver} or above."

      "Run `vlab dev setup` when you're ready.."
    s_lowpython: "Python version %{req_python_ver} is required for VivumLab to work"
    s_noprecommit: |+
      "Pre-commit is not installed. Contributing requires installing 'pre-commit'."
      "Run vlab dev_setup, when you're ready"
    s_sshunable: "VivumLab is unable to ssh to your server using the information in your config.yml"

  server:
    shutdown:
      name: "shutdown"
      desc: "Executes a shutdown of the Vlab server, optionally with countdown"
      out:
        shutdown: "Server will shutdown in %{time} minute(s)"
    restart:
      name: "restart"
      desc: "Executes a restart of the Vlab server, optionally with countdown"
      out:
        restart: "Server will restart in %{time} minute(s)"

  service:
    s_removing: "Removing data for service: %{service}"
    s_removed: "Data for %{service}, removed"
    s_resetting: "Resetting %{service}"
    s_reset: "%{service} has been reset"
    s_stopping: |+
      "Note: If no services are specified, VivumLab will stop all enabled services"
      "Stopping services now.."
    s_stopped: "All specified services have been stopped"
    s_restarting: |+
      "Note: If no services are specified, VivumLab will restart all enabled services"
      "Restarting services now.."
    s_restarted: "All specified services have been restarted"
    s_updating: |+
      "Note: If no services are specified, VivumLab will update all enabled services"
      "Updating services now.."
    s_updated: "All specified services have been updated"
    s_customizing: |+
      "This command creates a file, that will override the original docker-compose file for %{service}"
      "Any changes that the user wishes to make, should be made to the override file, not the original."
      "VivumLab will not change, nor delete the original file; the original file will just be ignored"
    q_customizing: "Did you want to make changes to the %{service} service?"
    s_customized: "%{service} is ready to customize"
    s_enabled: "%{service} is now enabled"
    s_disabled: "%{service} is now disabled"

  ssh:
    launch:
      name: "launch"
      desc: "Opens a shell on your VivumLab server"
      out:
        launching: "Launching an SSH session to your server"
    create_sshkey:
      name: "create_sshkey"
      desc: "Creates an SSH key, if one doesn't exist"
      out:
        keyexists: "SSH Key already exists at %{home_dir}/.ssh/%{passwordless_sshkey}"
        keycreating: "Creating %{passwordless_sshkey} and %{passwordless_sshkey}.pub"
        keycreated: "Key created"
    copy_sshkey:
      name: "copy_sshkey"
      desc: "Copy your ssh key over to the server"
      out:
        keycopying: "Copying keys to your server at %{vlab_ip}"
        keycopied: "Key copied"
    setup:
      name: "setup"
      desc: "Creates and copies your ssh key over to the server"

  terraform:
    create:
      name: "create"
      desc: "Spins up a cloud server with Terraform'"
      out:
        creating: "Creating a cloud server"
        created: "Successfully created a server at: %{ip}"
        setip: |+
          "Place this IP where you want it in your settings.."
          "either as vlab_ip or bastion.server_address"

          "Then run 'vlab deploy' to complete the setup."
    destroy:
      name: "destroy"
      desc: "Destroys server(s) created by terraform"
      out:
        destroying: "Destroying terraform built server"
        destroyed: "Cloud server(s) destroyed."

  utils:
    run_playbook:
      out:
        playbookexecuted: "%{playbook_command} finished"
        playbookerror: |+
          "Ansible Playbook command returned with an error code."
          "Exception is: %{e}"
    run_config_playbook:
      out:
        playbookexecuting: "executing playbook command: %{playbook_command}"
        playbookexecuted: "%{playbook_command} finished"
        playbookerror: |+
          "Failed to run Ansible playbook: playbook.config.yml"
          "Error is: %{e}"
