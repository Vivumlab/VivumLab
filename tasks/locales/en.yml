en:
  # cli.rb
  
  # config.rb
  
  # core.rb
  
  # deprecated.rb
  
  # dev.rb
  
  # git.rb
  s_git_settingssyncing: "Syncing settings via Git"
  s_git_settingssynced: "Settings synced"
  s_git_notsetup: |+
    "Warning! Your settings directory is not setup as a Git Repository"
    "Make sure to back them up using some other method. For more information, see:"
    "https://vivumlab.com/setup/installation/#syncing-settings-via-git"
  s_git_trackbranch: "You are now tracking the #{options[:branch]} branch"

  # migration.rb
  s_migration_notdone: "Single Config Migration did not run, because it was not needed"
  
  # sanity_checks.rb
  s_sc_localpassed: "Local sanity checks passed."
  s_sc_sshkeyverifying: "Verifying SSH keys, and the ability to remotely log in to your VivumLab server via passwordless SSH"
  s_sc_sshkeyverified: "SSH Keys are good to go!"
  s_sc_vaultpassmissing: |+
    "Oops, your vault password in #{Dir.home}, doesn't appear to exist."
    "This is unusual, but could be the result of the username changing after setup."
  s_sc_vaultpasscreate: |+
    "A new `.vlab_vault_pass` file can be created for you;"
    "or you can exit, and try to sort this out yourself."
  q_sc_vaultpasscreate: "Let VivumLab create a new .vlab_vault_pass for you? [y/n]"
  s_sc_gitnoexist: "You need to install git!"
  s_sc_lowprecommit: |+
    "Pre-commit is not installed or an earlier version than required."
    "Contributing to VivumLab requires Pre-Commit version #{REQUIRED_PRECOMMIT_VERSION} or above."

    "Run `vlab dev setup` when you're ready.."
  s_sc_lowpython: "Python version #{REQUIRED_PYTHON_VERSION} is required for VivumLab to work"
  s_sc_noprecommit: |+
    "Pre-commit is not installed. Contributing requires installing 'pre-commit'."
    "Run vlab dev_setup, when you're ready"
  s_sc_sshunable: "VivumLab is unable to ssh to your server using the information in your config.yml"
  
  # server.rb
  s_server_shutdown: "Server will shutdown in #{time} minute(s)"
  s_server_restart: "Server will restart in #{time} minute(s)"

  # service.rb
  s_service_removing: "Removing data for service: #{options[:service]}"
  s_service_removed: "Data for #{options[:service]}, removed"
  s_service_resetting: "Resetting #{options[:service]}"
  s_service_reset: "#{options[:service]} has been reset}"
  s_service_stopping: |+
    "Note: If no services are specified, VivumLab will stop all enabled services"
    "Stopping services now.."
  s_service_stopped: "All specified services have been stopped"
  s_service_restarting: |+
    "Note: If no services are specified, VivumLab will restart all enabled services"
    "Restarting services now.."
  s_service_restarted: "All specified services have been restarted"
  s_service_updating: |+
    "Note: If no services are specified, VivumLab will update all enabled services"
    "Updating services now.."
  s_service_updated: "All specified services have been updated"
  s_service_customizing: |+
    "This command creates a file, that will override the original docker-compose file for #{options[:service]}"
    "Any changes that the user wishes to make, should be made to the override file, not the original."
    "VivumLab will not change, nor delete the original file; the original file will just be ignored"
  q_service_customizing: "Did you want to make changes to the #{options[:service]} service?"
  s_service_customized: "#{options[:service]} is ready to customize"
  s_service_enabled: "#{options[:service]} is now enabled"
  s_service_disabled: "#{options[:service]} is now disabled"

  # ssh.rb
  s_ssh_launching: "Launching an SSH session to your server"
  s_ssh_keyexists: "SSH Key already exists at #{Dir.home}/.ssh/#{decrypted_config_file.passwordless_sshkey}"
  s_ssh_keycreating: "Creating #{decrypted_config_file.passwordless_sshkey} and #{decrypted_config_file.passwordless_sshkey}.pub"
  s_ssh_keycreated: "Key created"
  s_ssh_keycopying: "Copying keys to your server at #{decrypted_config_file.vlab_ip}"
  s_ssh_keycopied: "Key copied"

  # terraform.rb
  s_terraform_creating: "Creating a cloud server"
  s_terraform_created_success: "Successfully created a server at: #{terraform_ip}"
  s_terraform_ip_set: |+
    "Place this IP where you want it in your settings.."
    "either as vlab_ip or bastion.server_address"

    "Then run 'vlab deploy' to complete the setup."
  s_terraform_destroying: "Destroying terraform built server"
  s_terraform_destroy_success: "Cloud server(s) destroyed."

  # utils.rb
  s_utils_playbookexecuting: "executing playbook command: #{playbook_command}"
  s_utils_playbookexecuted: "#{playbook_command} finished"
  s_utils_playbookerror: "Ansible Playbook command returned with an error code."