---
fr:
  bastion:
    enable:
      usage: "enable"
      desc: "Active le serveur Bastion"
      out:
        done: "IP pour Bastion définie et activé dans le fichier d'inventaire"
        alreadyininventory: "Bastion déjà présent dans le fichier d'inventaire"
    disable:
      usage: "disable"
      desc: "Désactive le serveur Bastion"
      out:
        success: "Bastion désactivé dans la config et supprimé de l'inventaire"

    in:
      serveraddress: "Quel est l'IP de votre serveur Bastion?"

  config:
    new:
      usage: "new"
      desc: "Créé ou met à jour le fichier de configuration, si nécessaire"
      out:
        creating: "Creating, or updating Config file settings/%{config_dir}/config.yml"
    show:
      usage: "show"
      desc: "Affiche les paramètres de configuration pour un service spécifique"
      out:
        tablenorender: "Impossible de créer le tableau, en raison de la complexité de l'objet. Retour au texte"
    reset:
      usage: "reset"
      desc: "Réinitialise la configuration de VivumLab"
      out:
        resetting: "Réinitialisation du fichier config situé dans settings/%{config_dir}/config.yml"
        backup: "Backup de votre config existante"
    edit_raw:
      usage: "edit_raw"
      desc: "Déchiffre et ouvre le fichier de configuration dans nano, le crypte lors de l'enregistrement"
      out:
        editfile: "Décryptage et modification du fichier de configuration dans settings/%{config_dir}/encrypted.yml"
        editerror: "Une erreur s'est produite lors de l'exécution du décryptage et / ou de la modification du fichier"
        fileremove: "Pour des raisons de sécurité, le fichier de configuration temporaire déchiffré a été supprimé."
    decrypt:
      usage: "decrypt"
      desc: "Déchiffre le fichier de configuration chiffré. Vous devez re-ENCRYPTER vous-même en utilisant vlab config encrypt"
      out:
        decrypted: "Le fichier de configuration est maintenant déchiffré"
    encrypt:
      usage: "encrypt"
      desc: "Crypte un fichier config.yml donné vers encrypted.yml"
      out:
        encrypted: "Le fichier de configuration est maintenant encrypté"
    draw_error_table:
      out:
        keynomatch: "Impossible de trouver une correspondance complète pour la clé %{config_key}"
        possiblekey: "Voici quelques correspondances possibles:"

  core:
    checkversion:
      usage: "check-version"
      desc: "vérifie la version locale par rapport à la dernière de github"
      out:
        currentversion: "Vous avez la version %{current_version}"
        versionlatest: "Vous êtes à jour"
        versionupdate: "Pensez à mettre à jour vers %{latest_version}"
    generate_vault_pass:
      usage: "generate-vault-pass"
      desc: "Créé un nouveau mot de passe Vault"
      out:
        noaction: "La passe Vault existe, aucune action n'est entreprise"
    deploy:
      usage: "deploy"
      desc: "Déploie VivumLab, le configure d'abord si nécessaire"
      out:
        deploy: "Déploiement de Vivumlab"
    restore:
      usage: "restore"
      desc: "restaure une installation vlab, en supposant que des backups existent"
      out:
        restoring: "Restauration de vos backups, en cours..."
        restored: "Les backups ont été restaurées"
    uninstall:
      usage: "uninstall"
      desc: "supprime définitivement vlab"
      out:
        uninstall: |+
          La désinstallation de VivumLab est irréversible et doit toujours être effectuée avec prudence
          Assurez-vous de sauvegarder tous les fichiers que vous souhaitez conserver avant de désinstaller
        uninstalled: "VivumLab a été désinstallé."
      in:
        uninstall: "Êtes-vous sûr de vouloir désinstaller VivumLab"
        uninstallconfirm: "Confirmez à nouveau, si vous êtes sûr"

  deprecated:
    vault_encrypt:
      usage: "vault_encrypt"
      desc: "Crypte le fichier ansible vault.yml - DEPRECATED"
      out:
        encrypting: "Cryptage de la vault"
        encrypted: "Vault cryptée"
        failencrypt: "Cette commande peut échouer si la vault était déjà chiffré"
    vault_decrypt:
      usage: "vault_decrypt"
      desc: "Déchiffre le fichier ansible vault.yml - DEPRECATED"
      out:
        decrypting: "Décryptage de la vault"
        decrypted: "Vault déchiffrée"
        faildecrypt: "Cette commande peut échouer si la vault a déjà été déchiffré"

  dev:
    setup:
      usage: "setup"
      desc: "Exécuter pour installer les dépendances pour les développeurs"
      out:
        welcome: "Bienvenue dans la configuration du développeur VivumLab"
        precommiterror: "Impossible de trouver le pre-commit dans votre PATH, vous devrez peut-être ajouter ~/bin à votre PATH."
        readythanks: |+
          Ok, tout est prêt! Merci de faire partie de la communauté VivumLab
          Nous espérons que vous apprécierez votre temps avec nous
          Et nous avons hâte de réaliser de grandes choses ensemble
      in:
        contribute: "Voulez-vous contribuer à VivumLab? (yes pour oui ou no pour non)"
    set:
      usage: "set"
      desc: "Définit une variable de config"
      out:
        noservice: "Service %{service} introuvable dans le fichier config. Veuillez vérifier le service."
        nokey: "Clé %{config_key} introuvable dans le fichier config. Veuillez vérifier la clé."
    install_precommit:
      out:
        readdevdocs: |+
          Avant tout, assurez-vous d'avoir lu la documentation pour développeur
          Vous pouvez trouver la documentation pour développeurs ici:
          https://vivumlab.com/docs/dev/tips/
        precommitwarning: "Avant de push les modifications que vous avez apportées, la pre-commit devra être installée sur votre système"
        pythonerror: "VivumLab n'a pas pu trouver Python3 en utilisant `which python3`. VivumLab nécessite python3"
      in:
        installprecommit: "Installer pre-commit maintenant?"

  git:
    sync:
      usage: "sync"
      desc: "Synchronise le repo git de vos paramètres"
      out:
        settingssyncing: "Synchronisation les paramètres via Git"
        settingssynced: "Paramètres synchronisés"
        notsetup: |+
          Attention! Votre repo de paramètres n'est pas configuré en tant que repo Git
          Assurez-vous de les sauvegarder en utilisant une autre méthode. Pour plus d'informations, consultez:
          https://vivumlab.com/docs/core/installation#syncing-settings-via-git
    track:
      usage: "track"
      desc: "Vous permet de basculer entre les différentes branches ou tags de Vivumlab"
      out:
        trackbranch: "Vous êtes maintenant sur la branche %{branch}"

  migration:
    single_config:
      usage: "single_config"
      desc: "Migre d'un fichier config.yml et vault.yml vers un fichier encrypted.yml"
      out:
        notdone: "Migration non nécessaire. Fichiers de configuration valides."

  sanity_checks:
    check_ssh_keys:
      usage: "check_ssh_keys"
      desc: "Créé ou met à jour les clés SSH si nécessaire"
    local:
      usage: "local"
      desc: "Vérifications locales"
      out:
        passed: "Vérifications locales réussies."
    remote:
      usage: "remote"
      desc: "Vérifications du fonctionnement de la connection au serveur distant"
      out:
        sshkeyverifying: "Vérification des clés SSH et du fonctionnement de la connection à votre serveur VivumLab via SSH sans mot de passe"
        sshkeyverified: "Les clés SSH sont prêtes à l'emploi!"
    check_for_settings:
      usage: "check_for_settings"
      desc: "Vérifie que les paramètres existent"
    check_vault_pass:
      usage: "check_vault_pass"
      desc: "Vérifie la présence d'un fichier de mot de passe Vault"
      out:
        vaultpassmissing: |+
          Oups, votre mot de passe de vault dans %{home_dir} ne semble pas exister.
          Ceci est inhabituel, mais pourrait être le résultat d'un changement de nom d'utilisateur après l'installation.
        vaultpasscreate: |+
          Un nouveau fichier `.vlab_vault_pass` peut être créé pour vous;
          ou vous pouvez quitter et essayer de régler cela par vous-même.
      in:
        vaultpasscreate: "Laisser VivumLab créer un nouveau .vlab_vault_pass pour vous? [y/n] (y:oui, n:non)"
    check_for_git:
      usage: "check_for_git"
      desc: "Vérifie la présence de Git sur votre machine locale"
      out:
        gitnoexist: "Vous devez installer git!"
    check_for_precommit:
      usage: "check_for_precommit"
      desc: "Vérifie la présence de Pre-commit sur votre machine locale"
      out:
        lowprecommit: |+
          Pre-commit n'est pas installé ou une version antérieure à celle requise est installée.
          Contribuer à VivumLab nécessite la version %{precom_ver} de Pre-Commit ou supérieure.

          Exécutez `vlab dev setup` lorsque vous êtes prêt.
        lowpython: "Python version %{precom_ver} est nécessaire pour que VivumLab fonctionne"
        noprecommit: |+
          Pre-commit n'est pas installée. Contribuer nécessite l'installation de 'pre-commit'.
          Exécutez vlab dev_setup, lorsque vous êtes prêt
    check_ssh_with_keys:
      out:
        sshunable: "VivumLab est incapable de ssh vers votre serveur en utilisant les informations de votre config.yml"

  server:
    shutdown:
      usage: "shutdown"
      desc: "Exécute un arrêt du serveur Vlab, avec compte à rebours en option"
      out:
        shutdown: "Le serveur va s'arrêter dans %{time} minute(s)"
    restart:
      usage: "restart"
      desc: "Exécute un redémarrage du serveur Vlab, avec compte à rebours en option"
      out:
        restart: "Le serveur va redémarrer dans %{time} minute(s)"

  service:
    list:
      name: 'list'
      desc: 'Liste des services disponibles'
    remove:
      usage: "remove -s, --service NOMDUSERVICE"
      desc: "Supprime le(s) service(s) spécifié(s) du serveur VivumLab"
      out:
        removing: "Suppression des données pour le service: %{service}"
        removed: "Données de %{service} supprimées"
    reset:
      usage: "reset --service NOMDUSERVICE "
      desc: "Réinitialise les fichiers du (des) service(s) déployé(s) spécifié(s)."
      out:
        resetting: "Réinitialisation de %{service}"
        reset: "%{service} a été réinitialisé"
    stop:
      usage: "stop -s, --service NOMDUSERVICE"
      desc: "Arrête tous les services, ou, tout service spécifié si vous utilisez --service"
      out:
        stopping: |+
          Remarque: si aucun service(s) n'est spécifié, VivumLab arrêtera tous les services activés
          Arrêt du (des) service(s) en cours...
        stopped: "Tous les services spécifiés ont été arrêtés"
    restart:
      usage: "restart -s, --service NOMDUSERVICE"
      desc: "Redémarre tous les services, ou, tout service spécifié si vous utilisez --service"
      out:
        restarting: |+
          Remarque: si aucun service(s) n'est spécifié, VivumLab redémarrera tous les services activés
          Redémarrage du (des) service(s) en cours...
        restarted: "Tous les services spécifiés ont été redémarrés"
    update:
      usage: "update -s, --service SERVICE"
      desc: "Met à jour tous les services, ou, tout service spécifié si vous utilisez --service"
      out:
        updating: |+
          Remarque: si aucun service(s) n'est spécifié, VivumLab mettera à jour tous les services activés
          Service spécifié: %{service}
          Mise à jour en cours...
        updated: "Tous les services spécifiés ont été mis à jour"
    docs:
      usage: "docs"
      desc: "Afficher la doc pour le service spécifié"
    customize:
      usage: "customize"
      desc: "Vous permet de personnaliser un service déployé spécifique avec un docker-compose.override.yml"
      out:
        customizing: |+
          Cette commande créé un fichier qui remplacera le fichier docker-compose d'origine pour %{service}
          Toutes les modifications que l'utilisateur souhaite apporter doivent être apportées au fichier de remplacement, pas à l'original.
          VivumLab ne changera ni ne supprimera le fichier d'origine; le fichier d'origine sera simplement ignoré
        customized: "%{service} est prêt à être personnalisé"
      in:
        customizing: "Souhaitez-vous apporter des modifications au service %{service} ?"
    show:
      usage: "show"
      desc: "Afficher les options de configuration pour le service spécifié"
      out:
        disabled: "%{service} est maintenant désactivé"
    setup:
      usage: "setup"
      desc: "Configuration interactive des paramètres de configuration du (des) service(s) spécifié(s)"
      out:
        searchfail: "Impossible de trouver une config pour le service: %{service}"
        editing: "Modification des paramètres de configuration pour: %{service}"
      in:
        keyvalue: "Quelle valeur souhaitez-vous définir pour %{key}: "

  ssh:
    launch:
      usage: "launch"
      desc: "Ouvre un shell sur votre serveur VivumLab"
      out:
        launching: "Lancement d'une session SSH sur votre serveur"
    create_sshkey:
      usage: "create_sshkey"
      desc: "Créer une clé SSH si elle n'existe pas"
      out:
        keyexists: "La clé SSH existe déjà dans %{home_dir}/.ssh/%{passwordless_sshkey}"
        keycreating: "Création de %{passwordless_sshkey} et %{passwordless_sshkey}.pub"
        keycreated: "Clé créée"
    copy_sshkey:
      usage: "copy_sshkey"
      desc: "Copie votre clé ssh sur le serveur"
      out:
        keycopying: "Copie de la clé sur votre serveur à %{vlab_ip}"
        keycopied: "Clé copiée"
    setup:
      usage: "setup"
      desc: "Créé et copie votre clé ssh sur le serveur"

  terraform:
    bastion:
      usage: "bastion"
      desc: "Lance un serveur cloud et le définit comme votre serveur bastion"
    create:
      usage: "create"
      desc: "Lance un serveur cloud avec Terraform'"
      out:
        creating: "Création d'un serveur cloud"
        created: "Création réussie d'un serveur à: %{ip}"
        setip: |+
          Placez cette adresse IP où vous le souhaitez dans vos paramètres...
          lancez au choix:
          'vlab config set --dev --config-key vlab_ip --value %{ip}' or
          'vlab config set --dev --config-key bastion.server_address --value %{ip}'

          Then run 'vlab deploy' to complete the setup.
    destroy:
      usage: "destroy"
      desc: "Détruit le(s) serveur(s) créé(s) par terraform"
      out:
        destroying: "Détruction du serveur créé en terraform"
        destroyed: "Serveur(s) cloud détruit(s)."

  utils:
    run_playbook:
      out:
        playbookexecuted: "%{playbook_command} fini"
        playbookerror: |+
          Commande du Playbook Ansible renvoyée avec un code d'erreur.
          L'exception est: %{e}
    run_config_playbook:
      out:
        playbookexecuting: "executing playbook command: %{playbook_command}"
        playbookexecuted: "%{playbook_command} fini"
        playbookerror: |+
          Échec de l'exécution du playbook Ansible: playbook.config.yml
          L'erreur est: %{e}

  vlab:
    find_help:
      usage: "find_help"
      desc: "Montre à l'utilisateur comment contacter la communauté VivumLab"
    version:
      usage: "version"
      desc: "Affiche la version VivumLab"
      out:
        vlabversion: "Version de VivumLab: %{vlabversion}"

  dynamic_namespaces:
    service:
      config:
        usage: "service %{service} %{key}"
        desc: "Définit la valeur de configuration pour %{service}.%{key}"
        options:
          banner: "<VALUE>"
      classes:
        usage: "service %{service} %{meth}"
        desc: "%{meth}s %{service}. Pour plus d'informations, exécutez 'vlab service %{service} docs'"

  conffile_utils:
    encryptedyml:
      out:
        noexist: |+
          Impossible à trouver settings/%{config_dir}/encrypted.yml. Veuillez exécuter 'vlab config new --dev'
          Pour plus d'informations, veuillez exécuter 'vlab config'
    saveconf:
      out:
        saving: "Savegarde de config.yml"


  options:
    configdir: "Dossier de configuration à utiliser"
    servicename: "Nom du service à afficher"
    filetowrite: "Nom du fichier à écrire"
    filetoencrypt: "Nom du fichier à crypter"
    keytoset: 'Clé "Dot notation" à définir'
    valuetoset: "Valeur à définir"
    disablegitsync: "Désactiver le transfert de git vers remote"
    branchtrack: "Nom de la branche ou du tag que vous souhaitez utiliser"
    ansibledebug: "Commandes debugs Ansible-playbook"
    timershutdown: "Définit un compte à rebours en minutes avant l'arrêt du serveur"
    timerrestart: "Définit un compte à rebours en minutes avant le redémarrage du serveur"
    serviceswarning: "Nom facultatif du service. Sans celui-ci, on supprime tous les services."
    servicerequired: "Nom du service requis."
    enabledevtasks: "Activer les tâches de développeur"
    vlabversion: "Affiche la version actuelle de VivumLab"
