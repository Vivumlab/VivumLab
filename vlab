#!/usr/bin/env ruby

# frozen_string_literal: true

require 'rubygems'
require 'bundler'
require 'securerandom'
require_relative 'tasks/lib/vlab_i18n'
include VlabI18n
require_relative 'tasks/lib/vlab_constants'
include VlabConstants

Bundler.require(:default)

# This file contains just enough code to bootstrap the CLI.
# Bias towards putting actual tasks in namespaced files under
# tasks/. ie: tasks/sanitychecks.rb
class Vlab < Thor
  require_relative 'tasks/utils'
  require_relative 'tasks/lib/dynamic_service_namespaces'
  require_relative 'tasks/lib/config_file_utils'
  include Utils
  extend ConfigFileUtils

  class_option :config_dir, type: :string, desc: I18n.t('options.configdir'), default: 'prod'
  class_option :debug, desc: I18n.t('options.ansibledebug'), enum: %w[none warn debug trace], default: :none, aliases: ['-d']
  class_option :dev, type: :boolean, desc: I18n.t('options.enabledevtasks'), default: false
  class_option :disable_push, required: false, type: :boolean, desc: 'Disable pushing git to remote', default: false
  class_option :version, :type => :boolean, desc: I18n.t('options.vlabversion')

# Next line loads all ruby files in tasks/**/*.rb
  Dir['./tasks/**/*.rb'].sort.each { |file| require file }
  # If the included files are classes inheriting from Thor
  # dynamically add them to the available tasks list.
  # Note, we have to manually exclude *this* class.

  rejected = %w[AddPkg Thor Vlab DemoTasks CLI Core Deprecated Dev Migration SanityChecks Ssh]
  namespaces = ObjectSpace.each_object(Class).select { |klass_name| klass_name.superclass.to_s == 'Thor' }
                          .reject { |klass_name| rejected.include? klass_name.to_s }
                          .reject { |klass_name| constantized_services.include? klass_name.to_s }

  %w[AddPkg CLI Core Config Deprecated Dev Migration SanityChecks Ssh].each do |to_add|
    namespaces << to_add if ARGV.include?('-e') || ARGV.include?('--dev')
  end

  namespaces.each do |klass|
    desc klass.to_s.downcase, "Use vlab #{klass.to_s.downcase} for more information"
    subcommand klass.to_s.downcase, Kernel.const_get("::#{klass}")
  end

  desc I18n.t('vlab.find_help.usage'), I18n.t('vlab.find_help.desc')
  def find_help
    say TTY::Markdown.parse_file('website/docs/Contact-us.md')
  end

  desc I18n.t('vlab.version.usage'), I18n.t('vlab.version.desc')
  def version
    say I18n.t('vlab.version.out.vlabversion', vlabversion: current_version).light_blue
  end

  include DynamicServiceNamespaces

  #################
  # User Aliases #
  #################

  desc I18n.t('core.deploy.usage'), I18n.t('core.deploy.desc')
  option :disable_push, required: false, type: :boolean, desc: 'Disable pushing git to remote', default: false
  def deploy
    invoke 'config:new', [], options
    invoke 'core:deploy', [], options
  end

  desc I18n.t('service.update.usage'), I18n.t('service.update.desc')
  option :service, type: :string, desc: 'Optional name of service. Without, it restarts all services.', aliases: ['-s']
  option :disable_push, required: false, type: :boolean, desc: 'Disable pushing git to remote', default: false
  def update
    invoke 'config:new', [], options
    invoke 'service:update', [], options
  end

  desc I18n.t('core.restore.usage'), I18n.t('core.restore.desc')
  def restore
    invoke 'core:restore', [], {}
  end

  # This method ensures that if we have an error, the resulting return code
  # in the shell is not 0.
  def self.exit_on_failure?
    true
  end
end

# Kick off the actual cli app.
def log_filename
  file = 'VlabDebug.txt'
  dir  = File.dirname(file)
  base = File.basename(file, '.*')
  time = Time.now.to_i  # or format however you like
  ext  = File.extname(file)
  File.join(dir, "#{base}_#{time}#{ext}")
end

# rubocop:disable Style/GlobalVars
$this_log = log_filename
$logfile = File.new($this_log, 'w')
$logfile.sync = true

def $stdout.write(string)
  $logfile.write string
  super
end

def $stderr.write(string)
  $logfile.write string
  super
end

begin
  puts I18n.t('vlab.version.out.vlabversion', vlabversion: current_version).light_blue if ARGV.include?('--version')
  exit 0 if ARGV.include?('--version')

  Vlab.start
ensure
  if ARGV.include?('-d') || ARGV.include?('--debug')
    puts I18n.t('vlab.version.out.vlabversion', vlabversion: current_version).light_blue
    results = HTTParty.post 'https://hastebin.com/documents', body: File.read($this_log)
    puts "Your logs have been posted to: https://hastebin.com/#{results['key']}"
  else
    FileUtils.rm $this_log
  end
end
# rubocop:enable Style/GlobalVars
